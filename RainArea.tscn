[gd_scene load_steps=8 format=2]

[ext_resource path="res://assets/Audio/Env Audio/Stage 1 Env/mixkit-light-rain-looping-1249.wav" type="AudioStream" id=1]

[sub_resource type="Shader" id=5]
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/god-rays

Feel free to use, improve and change this shader according to your needs
and consider sharing the modified result on godotshaders.com.
*/

shader_type canvas_item;

uniform float angle = -0.3;
uniform float position = -0.2;
uniform float spread : hint_range(0.0, 1.0) = 0.5;
uniform float cutoff : hint_range(-1.0, 1.0) = 0.1;
uniform float falloff : hint_range(0.0, 1.0) = 0.2;
uniform float edge_fade : hint_range(0.0, 1.0) = 0.15;

uniform float speed = 1.0;
uniform float ray1_density = 8.0;
uniform float ray2_density = 30.0;
uniform float ray2_intensity : hint_range(0.0, 1.0) = 0.3;

uniform vec4 color : hint_color = vec4(1.0, 0.9, 0.65, 0.8);

uniform bool hdr = false;
uniform float seed = 5.0;

// Random and noise functions from Book of Shader's chapter on Noise.
float random(vec2 _uv) {
    return fract(sin(dot(_uv.xy,
                         vec2(12.9898, 78.233))) *
        43758.5453123);
}

float noise (in vec2 uv) {
    vec2 i = floor(uv);
    vec2 f = fract(uv);

    // Four corners in 2D of a tile
    float a = random(i);
    float b = random(i + vec2(1.0, 0.0));
    float c = random(i + vec2(0.0, 1.0));
    float d = random(i + vec2(1.0, 1.0));


    // Smooth Interpolation

    // Cubic Hermine Curve. Same as SmoothStep()
    vec2 u = f * f * (3.0-2.0 * f);

    // Mix 4 coorners percentages
    return mix(a, b, u.x) +
            (c - a)* u.y * (1.0 - u.x) +
            (d - b) * u.x * u.y;
}

mat2 rotate(float _angle){
    return mat2(vec2(cos(_angle), -sin(_angle)),
                vec2(sin(_angle), cos(_angle)));
}

vec4 screen(vec4 base, vec4 blend){
	return 1.0 - (1.0 - base) * (1.0 - blend);
}

void fragment()
{
	
	// Rotate, skew and move the UVs
	vec2 transformed_uv = ( rotate(angle) * (UV - position) )  / ( (UV.y + spread) - (UV.y * spread) );
	
	// Animate the ray according the the new transformed UVs
	vec2 ray1 = vec2(transformed_uv.x * ray1_density + sin(TIME * 0.1 * speed) * (ray1_density * 0.2) + seed, 1.0);
	vec2 ray2 = vec2(transformed_uv.x * ray2_density + sin(TIME * 0.2 * speed) * (ray1_density * 0.2) + seed, 1.0);
	
	// Cut off the ray's edges
	float cut = step(cutoff, transformed_uv.x) * step(cutoff, 1.0 - transformed_uv.x);
	ray1 *= cut;
	ray2 *= cut;
	
	// Apply the noise pattern (i.e. create the rays)
	float rays;
	
	if (hdr){
		// This is not really HDR, but check this to not clamp the two merged rays making 
		// their values go over 1.0. Can make for some nice effect
		rays = noise(ray1) + (noise(ray2) * ray2_intensity);
	}
	else{
		 rays = clamp(noise(ray1) + (noise(ray2) * ray2_intensity), 0., 1.);
	}
	
	// Fade out edges
	rays *= smoothstep(0.0, falloff, (1.0 - UV.y)); // Bottom
	rays *= smoothstep(0.0 + cutoff, edge_fade + cutoff, transformed_uv.x); // Left
	rays *= smoothstep(0.0 + cutoff, edge_fade + cutoff, 1.0 - transformed_uv.x); // Right
	
	// Color to the rays
	vec3 shine = vec3(rays) * color.rgb;

	// Try different blending modes for a nicer effect. \"Screen\" is included in the code,
	// but take a look at https://godotshaders.com/snippet/blending-modes/ for more.
	// With \"Screen\" blend mode:
	shine = screen(texture(SCREEN_TEXTURE, SCREEN_UV), vec4(color)).rgb;
	
	COLOR = vec4(shine, rays * color.a);
}"

[sub_resource type="ShaderMaterial" id=6]
shader = SubResource( 5 )
shader_param/angle = -0.3
shader_param/position = -0.2
shader_param/spread = 0.5
shader_param/cutoff = 0.1
shader_param/falloff = 0.2
shader_param/edge_fade = 0.15
shader_param/speed = 1.0
shader_param/ray1_density = 8.0
shader_param/ray2_density = 30.0
shader_param/ray2_intensity = 0.3
shader_param/color = Color( 1, 0.9, 0.65, 0.8 )
shader_param/hdr = false
shader_param/seed = 5.0

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

// Amount of detail.
uniform int octaves = 4;

// Opacity of the output fog.
uniform float starting_amplitude: hint_range(0.0, 0.5) = 0.5;

// Rate of pattern within the fog.
uniform float starting_frequency = 1.0;

// Shift towards transparency (clamped) for sparser fog.
uniform float shift: hint_range(-1.0, 0.0) = -0.2;

// Direction and speed of travel.
uniform vec2 velocity = vec2(1.0, 1.0);

// Color of the fog.
uniform vec4 fog_color: hint_color = vec4(0.0, 0.0, 0.0, 1.0);

// Noise texture; OpenSimplexNoise is great, but any filtered texture is fine.
uniform sampler2D noise;

float rand(vec2 uv) {
	float amplitude = starting_amplitude;
	float frequency = starting_frequency;
	float output = 0.0;
	for (int i = 0; i < octaves; i++) {
		output += texture(noise, uv * frequency).x * amplitude;
		amplitude /= 2.0;
		frequency *= 2.0;
	}
	return clamp(output + shift, 0.0, 1.0);
}

void fragment() {
	vec2 motion = vec2(rand(UV + TIME * starting_frequency * velocity));
	COLOR = mix(vec4(0.0), fog_color, rand(UV + motion));
}"

[sub_resource type="OpenSimplexNoise" id=3]

[sub_resource type="NoiseTexture" id=4]
seamless = true
bump_strength = 26.1
noise = SubResource( 3 )

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/octaves = 6
shader_param/starting_amplitude = 0.358
shader_param/starting_frequency = 0.5
shader_param/shift = -0.102
shader_param/velocity = Vector2( -0.3, -0.7 )
shader_param/fog_color = Color( 1, 1, 1, 1 )
shader_param/noise = SubResource( 4 )

[node name="RainArea" type="Area2D"]

[node name="Rain" type="CPUParticles2D" parent="."]
position = Vector2( 172, -1325 )
rotation = -0.400713
scale = Vector2( 1.34855, 19.5433 )
z_index = 5
amount = 800
lifetime = 2.5
preprocess = 49.54
lifetime_randomness = 0.59
emission_shape = 2
emission_rect_extents = Vector2( 1300, 1 )
direction = Vector2( 0, 1 )
spread = 48.3
gravity = Vector2( 0, 1 )
initial_velocity = 247.7
initial_velocity_random = 0.13
damping = 17.87
scale_amount = 2.0
scale_amount_random = 0.46
color = Color( 0.2, 0.678431, 0.843137, 0.878431 )
hue_variation = 0.01
hue_variation_random = 0.62

[node name="Rain2" type="CPUParticles2D" parent="."]
visible = false
position = Vector2( 902, 231 )
scale = Vector2( 3.82762, 4.71069 )
z_index = 2
amount = 400
preprocess = 22.02
lifetime_randomness = 0.59
emission_shape = 2
emission_rect_extents = Vector2( 400, 200 )
direction = Vector2( 1, 100 )
gravity = Vector2( 0, 0 )
scale_amount = 1.3
scale_amount_random = 0.52
color = Color( 0.2, 0.678431, 0.843137, 0.878431 )

[node name="Rain3" type="CPUParticles2D" parent="."]
visible = false
position = Vector2( 1321, -744 )
scale = Vector2( 3.82762, 4.71069 )
z_index = 6
emitting = false
amount = 6
lifetime = 50.0
explosiveness = 0.53
lifetime_randomness = 0.59
emission_shape = 2
emission_rect_extents = Vector2( 300, 0 )
direction = Vector2( 1, 100 )
gravity = Vector2( 0, 0 )
initial_velocity = 73.39
initial_velocity_random = 0.17
scale_amount = 166.44
scale_amount_random = 0.52
color = Color( 0.196078, 0.886275, 1, 0.388235 )

[node name="Camera2D" type="Camera2D" parent="."]
visible = false
position = Vector2( 865, 171 )
zoom = Vector2( 1.6, 1.6 )

[node name="ColorRect" type="ColorRect" parent="."]
visible = false
material = SubResource( 6 )
margin_left = -704.0
margin_top = -813.0
margin_right = 2491.0
margin_bottom = 1094.0

[node name="ColorRect2" type="ColorRect" parent="."]
material = SubResource( 2 )
margin_left = -716.0
margin_top = -776.0
margin_right = 2454.0
margin_bottom = 1061.0
color = Color( 0.929412, 0.929412, 0.929412, 1 )

[node name="RainSounds" type="AudioStreamPlayer2D" parent="."]
position = Vector2( 975, 491 )
stream = ExtResource( 1 )
volume_db = -6.992
max_distance = 1800.0
